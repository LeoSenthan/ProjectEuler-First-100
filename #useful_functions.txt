PRIMES:

 To estimate number of primes from 1 to n is n/ln(n) else between x and y is y/ln y - x/ln
 
n=0
primes=[2,3]
while primes[-1]<1000000:
  n=n+1
  num1,num2,flag1,flag2=n*6-1,n*6+1,True,True
  for i in range(0,len(primes)):
    if num1%primes[i]==0:
      flag1=False
  if flag1==True:
    primes.append(num1)
  for i in range(0,len(primes)):
    if num2%primes[i]==0:
      flag2=False
  if flag2==True:
    primes.append(num2)
print(primes)

def SieveOfEratosthenes(num):
  list1=[]
  prime = [True for i in range(num+1)]
  p = 2
  while (p * p <= num):
      if (prime[p] == True):
          for i in range(p * p, num+1, p):
              prime[i] = False
      p += 1
  for p in range(2, num+1):
      if prime[p]:
          list1.append(p)
  return list1
SieveOfEratosthenes(1000001)

import math
def primeFactors(n):
  factors=[]
  while n % 2 == 0:
      factors.append(2)
      n = n // 2
  for i in range(3,int(math.sqrt(n))+1,2):
      while n % i== 0:
          factors.append(i)
          n = n // i
  if n > 2:
      factors.append(n)
  return factors
factors=primeFactors(64)

def euclidean_algorithm(a, b):
while b != 0:
    a, b = b, a % b
return a

PARTITIONS:

newpentagons=[]
for i in range(1,250):
  new=int(i*(3*i-1)/2)
  newpentagons.append(new)
jump=0
pentagons=[]
for x in range(0,len(newpentagons)):
  jump=jump+1
  pentagons.append(newpentagons[x])
  pentagons.append(newpentagons[x] + jump)

partitions =[1,1,2,3,5,7,11,15,22,30,42,56]
while partitions[-1]%1000000!=0:
  current=len(partitions)
  total=0
  for x in range(0,len(pentagons)):
    if pentagons[x]<=current:
      if x%4==2 or x%4==3:
        total=total-partitions[current-pentagons[x]]
      else:
        total=total+partitions[current-pentagons[x]]
    else:
      break
  partitions.append(total)
  if total<0:
    break
print(len(partitions))

def triangle_area_heron(a, b, c):
s = (a + b + c) / 2
area = math.sqrt(s * (s - a) * (s - b) * (s - c))
return area

To do permutations of digits efficiently use:
 list.append(''.join(sorted(str(number))))

DIVISORS:
def sum_of_divisors(n):
divisors = []
for possible in range(1, int(math.sqrt(n)) + 1):
    if n % possible == 0:
        divisors.append(n // possible)
        divisors.append(possible)
divisors = sorted(set(divisors))[:-1]
return sum(divisors)